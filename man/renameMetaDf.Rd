% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rename-not-exported.R
\name{renameMetaDf}
\alias{renameMetaDf}
\alias{renameMetaDfWith}
\title{Rename meta variables}
\usage{
renameMetaDf(object, ..., phase = NULL)

renameMetaDfWith(object, ..., phase = NULL)
}
\arguments{
\item{object}{Any object for whose class a method has been defined.}

\item{...}{Input for function \code{dplyr::rename_with()}. This includes the arguments
\code{.fn} and \code{.cols}.}

\item{phase}{Character or numeric. If character, the ordinal value referring to the phase of interest (e.g. \emph{'first'}, \emph{'second'} etc.).
referring to the phase of interest or \emph{'all'}. If numeric, the number referring to the phase.

If set to NULL takes the phase denoted as default with \code{adjustDefault()}.

Ignored if the experiment design contains only one phase.}
}
\value{
An updated version of the input \code{cypro}-object.
}
\description{
Implementations of the functions \code{dplyr::rename()} and
\code{dplyr::rename_with()} that can be used to rename the variables of the cell meta
data.frame.

\code{rename*Df()} changes the names of individual variables using \emph{new_name} = \emph{old_name}
syntax. \code{rename*DfWith()} renames variables with a function specified in argument \code{.fn}.
}
\details{
Use \code{getGroupingVariableNames()} to check if renaming resulted in
the desired output.
}
\note{
Make sure not to rename protected variables. Use the function \code{protectedVariables()}
to obtain variable names that must not be changed and must not be added. Doing
so will result in erroneous analysis results as many functions rely on these
variables to carry specific meaning.
}
\seealso{
\code{dplyr::rename()}, \code{dplyr::rename_with()}
}
